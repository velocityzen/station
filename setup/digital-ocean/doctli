#!/bin/zsh
GITHUB_KEY_FILE=~/.ssh/github
HOST_KEY_FILE=~/.ssh/hosts

if [ "$1" = keys ]; then
  doctl compute ssh-key list
  exit
fi

if [ "$1" = addkey ]; then
  doctl compute ssh-key import velocityzen --public-key-file $HOST_KEY_FILE
  exit
fi

if [ "$1" = create ]; then
  doctl compute droplet create $2 --region nyc3 --size s-1vcpu-1gb --image ubuntu-18-04-x64 --ssh-keys $3 --wait --format "ID,Name,PublicIPv4"
  exit
fi

if [ "$1" = ssh ]; then
  doctl compute ssh $2
  exit
fi

if [ "$1" = init ]; then
  # sign in to 1password if there is no 1p session
  if ! [ -n "${OP_SESSION_my+1}" ]; then
    eval $(op signin my)
  fi
  # generate random password
  PASSWORD=$(openssl rand -base64 33)
  # create record in 1password
  ENCODED_ITEM=$(echo '{"sections":[{"fields":[{"k":"string","n":"username","t":"username","v":"deployer"},{"k":"concealed","n":"password","t":"password","v":"'"$PASSWORD"'"}],"name":"","title":""}]}' | op encode)
  op create item Server $ENCODED_ITEM  --title=$2

  doctl compute ssh $2 --ssh-command "export PASSWORD=$PASSWORD; $(<doctli-init.sh)"
  pubkey=$(<$HOST_KEY_FILE.pub)
  doctl compute ssh $2 --ssh-command "mkdir -p /home/deployer/.ssh && echo $pubkey >> /home/deployer/.ssh/authorized_keys && chown -R deployer:deployer /home/deployer/.ssh"
  exit
fi

if [ "$1" = install ]; then
  fullname=${3##*/}
  name="${fullname%.*}"
  eval "$(ssh-agent -s)"
  ssh-add $GITHUB_KEY_FILE
  doctl compute ssh deployer@$2 --ssh-agent-forwarding --ssh-command "git clone $3 && cd $name && npm i --production"
  exit
fi

if [ "$1" = domain ]; then
  exit
fi
